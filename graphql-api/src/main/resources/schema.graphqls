type Query {
    # User
    getUser(id: ID!): User
    getEmployeeDetails(employeeId: ID!): EmployeeDetails

    # Payroll
    getPayrolls(employeeId: ID!): [Payroll]

    # Absence
    getAbsences(employeeId: ID!): [Absence]

    # Performance
    getPerformanceReviews(employeeId: ID!): [PerformanceReview]
}

type Mutation {
    # User
    createUser(
        username: String!,
        email: String!,
        password: String!,
        role: String!
    ): User

    # Payroll
    createPayroll(
        employeeId: ID!,
        baseSalary: Float!,
        bonus: Float!,
        deductions: Float!,
        paymentDate: String
    ): Payroll

    # Absence
    createAbsence(
        employeeId: ID!,
        startDate: String!,
        endDate: String!,
        reason: String!,
        status: String!
    ): Absence

    # Performance
    createPerformanceReview(
        employeeId: ID!,
        score: Int!,
        comments: String,
        reviewDate: String!
    ): PerformanceReview

    deletePerformanceReview(id: ID!): Boolean
}

### Types communs ###
type EmployeeDetails {
    profile: User
    payrolls: [Payroll]
    absences: [Absence]
    performanceReviews: [PerformanceReview]
}

type User {
    id: ID!
    username: String!
    email: String!
    role: String!
}

### Payroll ###
type Payroll {
    id: ID!
    employeeId: ID!
    baseSalary: Float!
    bonus: Float!
    deductions: Float!
    netSalary: Float!
    paymentDate: String
}

### Absence ###
type Absence {
    id: ID!
    employeeId: ID!
    startDate: String!
    endDate: String!
    reason: String!
    status: String!
}

### Performance ###
type PerformanceReview {
    id: ID!
    employeeId: ID!
    score: Int!
    comments: String
    reviewDate: String!
}